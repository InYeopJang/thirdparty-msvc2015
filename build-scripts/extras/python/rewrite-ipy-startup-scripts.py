""" Generate IPython 2.4.1 startup scripts

This functions below were extracted from https://github.com/ipython/ipython/blob/af17558781ff8d6ac0629e809399d67235a7e1db/setupbase.py#L355
and modified to work standalone. The default installer produces non-relocatable .exe files that can't be moved.
It is assumed that the Python .exe will be located in the parent directory to the launcher
"""
from __future__ import print_function
from distutils.command.build_scripts import build_scripts

import os
import sys

PY_EXECUTABLE = "%~dp0\..\python.exe"

def find_entry_points():
    """Find IPython's scripts.
    suffix is appended to script names if entry_points is True
    """
    ep = [
            'ipython%s = IPython:start_ipython',
            'ipcontroller%s = IPython.parallel.apps.ipcontrollerapp:launch_new_instance',
            'ipengine%s = IPython.parallel.apps.ipengineapp:launch_new_instance',
            'ipcluster%s = IPython.parallel.apps.ipclusterapp:launch_new_instance',
            'iptest%s = IPython.testing.iptestcontroller:main',
        ]
    suffix = str(sys.version_info[0])
    return [e % '' for e in ep] + [e % suffix for e in ep]

script_src = """#!{executable}
# This script was automatically generated by rewrite-ipy-startup-scripts.py
if __name__ == '__main__':
    from {mod} import {func}
    {func}()
"""

cmd_src = """REM This script was automatically generated by rewrite-ipy-startup-scripts.py
@echo off
setlocal enableextensions
REM python launcher script. Uses a relative path to the Python
REM executable to ensure it is relocatable
set _scripts_dir=%~dp0
%_scripts_dir%\..\python.exe %_scripts_dir%{startupscript} %*
"""

class build_scripts_entrypt(build_scripts):

    def __init__(self, build_dir):
        self.build_dir = build_dir
        self.dry_run = False

    def run(self):
        self.mkpath(self.build_dir)
        outfiles = []
        for script in find_entry_points():
            name, entrypt = script.split('=')
            name = name.strip()
            entrypt = entrypt.strip()
            outfile = os.path.join(self.build_dir, name)
            outfiles.append(outfile)
            print('Writing script to', outfile)

            mod, func = entrypt.split(':')
            with open(outfile, 'w') as f:
                f.write(script_src.format(executable=PY_EXECUTABLE,
                                          mod=mod, func=func))
            # Write .cmd launcher
            cmdfile = outfile + ".cmd"
            print('Writing launcher to', cmdfile)
            with open(cmdfile, 'w') as f:
                f.write(cmd_src.format(startupscript=name))
            
            # Remove the corresponding executable
            exefile = outfile + ".exe"
            try:
                print('Removing', exefile)
                os.remove(exefile)
            except OSError, exc:
                print('Error removing "{0}": "{1}"'.format(exefile, str(exc)))

        return outfiles, outfiles

if __name__ == '__main__':
    build_dir = sys.argv[1]
    build_scripts_entrypt(build_dir).run()